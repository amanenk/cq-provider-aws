-- Autogenerated by migration tool on 2022-05-04 20:31:25
-- CHANGEME: Verify or edit this file before proceeding

-- aws_redshift_clusters: change PK to arn field
TRUNCATE TABLE aws_redshift_clusters CASCADE;
ALTER TABLE IF EXISTS aws_redshift_clusters DROP CONSTRAINT aws_redshift_clusters_pk;
ALTER TABLE IF EXISTS aws_redshift_clusters ADD CONSTRAINT aws_redshift_clusters_pk PRIMARY KEY (cq_fetch_date,arn);

-- aws_redshift_snapshots: add cluster_cq_id and a corresponding FK constraint
ALTER TABLE IF EXISTS aws_redshift_snapshots ADD COLUMN IF NOT EXISTS cluster_cq_id uuid;
ALTER TABLE IF EXISTS aws_redshift_snapshots
    ADD CONSTRAINT aws_redshift_snapshots_cluster_cq_id_fkey
    FOREIGN KEY (cq_fetch_date, cluster_cq_id)
    REFERENCES aws_redshift_clusters(cq_fetch_date, cq_id);

-- aws_redshift_snapshots: add ARN, change PK to ARN
ALTER TABLE IF EXISTS aws_redshift_snapshots DROP CONSTRAINT aws_redshift_snapshots_pk;
ALTER TABLE IF EXISTS aws_redshift_snapshots ADD COLUMN IF NOT EXISTS arn text;
ALTER TABLE IF EXISTS aws_redshift_snapshots ADD CONSTRAINT aws_redshift_snapshots_pk PRIMARY KEY (cq_fetch_date,arn);

-- Resource: redshift.event_subscriptions
TRUNCATE TABLE aws_redshift_event_subscriptions CASCADE;
ALTER TABLE IF EXISTS aws_redshift_event_subscriptions DROP CONSTRAINT aws_redshift_event_subscriptions_pk;
ALTER TABLE IF EXISTS aws_redshift_event_subscriptions ADD COLUMN IF NOT EXISTS arn text;
UPDATE aws_redshift_event_subscriptions SET arn = format('arn:aws:redshift:%s:%s:eventsubscription:%s', region, account_id, id);
ALTER TABLE IF EXISTS aws_redshift_event_subscriptions ADD CONSTRAINT aws_redshift_event_subscriptions_pk PRIMARY KEY (cq_fetch_date,arn);

-- aws_redshift_subnet_groups: change PK to ARN
TRUNCATE TABLE aws_redshift_subnet_groups CASCADE;
ALTER TABLE IF EXISTS aws_redshift_subnet_groups DROP CONSTRAINT aws_redshift_subnet_groups_pk;
UPDATE aws_redshift_subnet_groups SET arn = format('arn:aws:redshift:%s:%s:subnetgroup:%s', region, account_id, cluster_subnet_group_name);
ALTER TABLE IF EXISTS aws_redshift_subnet_groups ADD CONSTRAINT aws_redshift_subnet_groups_pk PRIMARY KEY (cq_fetch_date, arn);

-- Resource: wafv2.managed_rule_groups
TRUNCATE TABLE aws_wafv2_managed_rule_groups;
ALTER TABLE IF EXISTS aws_wafv2_managed_rule_groups DROP CONSTRAINT aws_wafv2_managed_rule_groups_pk;
ALTER TABLE IF EXISTS "aws_wafv2_managed_rule_groups" ADD COLUMN IF NOT EXISTS "scope" text;
ALTER TABLE IF EXISTS aws_wafv2_managed_rule_groups ADD CONSTRAINT aws_wafv2_managed_rule_groups_pk PRIMARY KEY (cq_fetch_date,account_id,region,scope,vendor_name,name);

-- Resource: wafv2.rule_groups
TRUNCATE TABLE aws_wafv2_rule_groups;
ALTER TABLE IF EXISTS "aws_wafv2_rule_groups" ADD COLUMN IF NOT EXISTS "scope" text;

-- Resource: wafv2.web_acls
TRUNCATE TABLE aws_wafv2_web_acls CASCADE;
ALTER TABLE IF EXISTS "aws_wafv2_web_acls" ADD COLUMN IF NOT EXISTS "scope" text;

-- Resource: athena.data_catalogs
CREATE TABLE IF NOT EXISTS "aws_athena_data_catalogs"(
    "cq_id" uuid NOT NULL,
    "cq_meta" jsonb,
    "cq_fetch_date" timestamp WITHOUT TIME ZONE NOT NULL,
    "account_id" text,
    "region" text,
    "tags" jsonb,
    "name" text,
    "type" text,
    "description" text,
    "parameters" jsonb,
    CONSTRAINT aws_athena_data_catalogs_pk PRIMARY KEY(cq_fetch_date,account_id,region,name),
    UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('aws_athena_data_catalogs');
CREATE TABLE IF NOT EXISTS "aws_athena_data_catalog_databases"(
    "cq_id" uuid NOT NULL,
    "cq_meta" jsonb,
    "cq_fetch_date" timestamp WITHOUT TIME ZONE NOT NULL,
    "data_catalog_cq_id" uuid,
    "name" text,
    "description" text,
    "parameters" jsonb,
    CONSTRAINT aws_athena_data_catalog_databases_pk PRIMARY KEY(cq_fetch_date,cq_id),
    UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON aws_athena_data_catalog_databases(cq_fetch_date,data_catalog_cq_id);
SELECT setup_tsdb_child('aws_athena_data_catalog_databases','data_catalog_cq_id','aws_athena_data_catalogs','cq_id');
CREATE TABLE IF NOT EXISTS "aws_athena_data_catalog_database_tables"(
    "cq_id" uuid NOT NULL,
    "cq_meta" jsonb,
    "cq_fetch_date" timestamp WITHOUT TIME ZONE NOT NULL,
    "data_catalog_database_cq_id" uuid,
    "name" text,
    "create_time" timestamp WITHOUT TIME ZONE,
    "last_access_time" timestamp WITHOUT TIME ZONE,
    "parameters" jsonb,
    "table_type" text,
    CONSTRAINT aws_athena_data_catalog_database_tables_pk PRIMARY KEY(cq_fetch_date,cq_id),
    UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON aws_athena_data_catalog_database_tables(cq_fetch_date,data_catalog_database_cq_id);
SELECT setup_tsdb_child('aws_athena_data_catalog_database_tables','data_catalog_database_cq_id',
                        'aws_athena_data_catalog_databases','cq_id');
CREATE TABLE IF NOT EXISTS "aws_athena_data_catalog_database_table_columns"(
    "cq_id" uuid NOT NULL,
    "cq_meta" jsonb,
    "cq_fetch_date" timestamp WITHOUT TIME ZONE NOT NULL,
    "data_catalog_database_table_cq_id" uuid,
    "name" text,
    "comment" text,
    "type" text,
    CONSTRAINT aws_athena_data_catalog_database_table_columns_pk PRIMARY KEY(cq_fetch_date,cq_id),
    UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON aws_athena_data_catalog_database_table_columns(cq_fetch_date,data_catalog_database_table_cq_id);
SELECT setup_tsdb_child('aws_athena_data_catalog_database_table_columns','data_catalog_database_table_cq_id',
                        'aws_athena_data_catalog_database_tables','cq_id');
CREATE TABLE IF NOT EXISTS "aws_athena_data_catalog_database_table_partition_keys"(
    "cq_id" uuid NOT NULL,
    "cq_meta" jsonb,
    "cq_fetch_date" timestamp WITHOUT TIME ZONE NOT NULL,
    "data_catalog_database_table_cq_id" uuid,
    "name" text,
    "comment" text,
    "type" text,
    CONSTRAINT aws_athena_data_catalog_database_table_partition_keys_pk PRIMARY KEY(cq_fetch_date,cq_id),
    UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON aws_athena_data_catalog_database_table_partition_keys(cq_fetch_date,data_catalog_database_table_cq_id);
SELECT setup_tsdb_child('aws_athena_data_catalog_database_table_partition_keys','data_catalog_database_table_cq_id',
                        'aws_athena_data_catalog_database_tables','cq_id');

-- Resource: athena.work_groups
CREATE TABLE IF NOT EXISTS "aws_athena_work_groups"(
    "cq_id" uuid NOT NULL,
    "cq_meta" jsonb,
    "cq_fetch_date" timestamp WITHOUT TIME ZONE NOT NULL,
    "account_id" text,
    "region" text,
    "tags" jsonb,
    "name" text,
    "bytes_scanned_cutoff_per_query" bigint,
    "enforce_work_group_configuration" boolean,
    "effective_engine_version" text,
    "selected_engine_version" text,
    "publish_cloud_watch_metrics_enabled" boolean,
    "requester_pays_enabled" boolean,
    "acl_configuration_s3_acl_option" text,
    "encryption_configuration_encryption_option" text,
    "encryption_configuration_kms_key" text,
    "expected_bucket_owner" text,
    "output_location" text,
    "creation_time" timestamp WITHOUT TIME ZONE,
    "description" text,
    "state" text,
    CONSTRAINT aws_athena_work_groups_pk PRIMARY KEY(cq_fetch_date,account_id,region,name),
    UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('aws_athena_work_groups');
CREATE TABLE IF NOT EXISTS "aws_athena_work_group_prepared_statements"(
    "cq_id" uuid NOT NULL,
    "cq_meta" jsonb,
    "cq_fetch_date" timestamp WITHOUT TIME ZONE NOT NULL,
    "work_group_cq_id" uuid,
    "description" text,
    "last_modified_time" timestamp WITHOUT TIME ZONE,
    "query_statement" text,
    "statement_name" text,
    "work_group_name" text,
    CONSTRAINT aws_athena_work_group_prepared_statements_pk PRIMARY KEY(cq_fetch_date,cq_id),
    UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON aws_athena_work_group_prepared_statements(cq_fetch_date,work_group_cq_id);
SELECT setup_tsdb_child('aws_athena_work_group_prepared_statements','work_group_cq_id','aws_athena_work_groups',
                        'cq_id');
CREATE TABLE IF NOT EXISTS "aws_athena_work_group_query_executions"(
    "cq_id" uuid NOT NULL,
    "cq_meta" jsonb,
    "cq_fetch_date" timestamp WITHOUT TIME ZONE NOT NULL,
    "work_group_cq_id" uuid,
    "effective_engine_version" text,
    "selected_engine_version" text,
    "query" text,
    "catalog" text,
    "database" text,
    "id" text,
    "acl_configuration_s3_acl_option" text,
    "encryption_configuration_encryption_option" text,
    "encryption_configuration_kms_key" text,
    "expected_bucket_owner" text,
    "output_location" text,
    "statement_type" text,
    "data_manifest_location" text,
    "data_scanned_in_bytes" bigint,
    "engine_execution_time_in_millis" bigint,
    "query_planning_time_in_millis" bigint,
    "query_queue_time_in_millis" bigint,
    "service_processing_time_in_millis" bigint,
    "total_execution_time_in_millis" bigint,
    "athena_error_error_category" integer,
    "athena_error_error_message" text,
    "athena_error_error_type" integer,
    "athena_error_retryable" boolean,
    "completion_date_time" timestamp WITHOUT TIME ZONE,
    "state" text,
    "state_change_reason" text,
    "submission_date_time" timestamp WITHOUT TIME ZONE,
    "work_group" text,
    CONSTRAINT aws_athena_work_group_query_executions_pk PRIMARY KEY(cq_fetch_date,cq_id),
    UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON aws_athena_work_group_query_executions(cq_fetch_date,work_group_cq_id);
SELECT setup_tsdb_child('aws_athena_work_group_query_executions','work_group_cq_id','aws_athena_work_groups',
                        'cq_id');
CREATE TABLE IF NOT EXISTS "aws_athena_work_group_named_queries"(
    "cq_id" uuid NOT NULL,
    "cq_meta" jsonb,
    "cq_fetch_date" timestamp WITHOUT TIME ZONE NOT NULL,
    "work_group_cq_id" uuid,
    "database" text,
    "name" text,
    "query_string" text,
    "description" text,
    "named_query_id" text,
    "work_group" text,
    CONSTRAINT aws_athena_work_group_named_queries_pk PRIMARY KEY(cq_fetch_date,cq_id),
    UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON aws_athena_work_group_named_queries(cq_fetch_date,work_group_cq_id);
SELECT setup_tsdb_child('aws_athena_work_group_named_queries','work_group_cq_id','aws_athena_work_groups','cq_id');
