// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudquery/cq-provider-aws/client (interfaces: SSOAdminClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	ssoadmin "github.com/aws/aws-sdk-go-v2/service/ssoadmin"
	gomock "github.com/golang/mock/gomock"
)

// MockSSOAdminClient is a mock of SSOAdminClient interface.
type MockSSOAdminClient struct {
	ctrl     *gomock.Controller
	recorder *MockSSOAdminClientMockRecorder
}

// MockSSOAdminClientMockRecorder is the mock recorder for MockSSOAdminClient.
type MockSSOAdminClientMockRecorder struct {
	mock *MockSSOAdminClient
}

// NewMockSSOAdminClient creates a new mock instance.
func NewMockSSOAdminClient(ctrl *gomock.Controller) *MockSSOAdminClient {
	mock := &MockSSOAdminClient{ctrl: ctrl}
	mock.recorder = &MockSSOAdminClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSSOAdminClient) EXPECT() *MockSSOAdminClientMockRecorder {
	return m.recorder
}

// DescribePermissionSet mocks base method.
func (m *MockSSOAdminClient) DescribePermissionSet(arg0 context.Context, arg1 *ssoadmin.DescribePermissionSetInput, arg2 ...func(*ssoadmin.Options)) (*ssoadmin.DescribePermissionSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribePermissionSet", varargs...)
	ret0, _ := ret[0].(*ssoadmin.DescribePermissionSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePermissionSet indicates an expected call of DescribePermissionSet.
func (mr *MockSSOAdminClientMockRecorder) DescribePermissionSet(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePermissionSet", reflect.TypeOf((*MockSSOAdminClient)(nil).DescribePermissionSet), varargs...)
}

// GetInlinePolicyForPermissionSet mocks base method.
func (m *MockSSOAdminClient) GetInlinePolicyForPermissionSet(arg0 context.Context, arg1 *ssoadmin.GetInlinePolicyForPermissionSetInput, arg2 ...func(*ssoadmin.Options)) (*ssoadmin.GetInlinePolicyForPermissionSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInlinePolicyForPermissionSet", varargs...)
	ret0, _ := ret[0].(*ssoadmin.GetInlinePolicyForPermissionSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInlinePolicyForPermissionSet indicates an expected call of GetInlinePolicyForPermissionSet.
func (mr *MockSSOAdminClientMockRecorder) GetInlinePolicyForPermissionSet(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInlinePolicyForPermissionSet", reflect.TypeOf((*MockSSOAdminClient)(nil).GetInlinePolicyForPermissionSet), varargs...)
}

// ListAccountAssignments mocks base method.
func (m *MockSSOAdminClient) ListAccountAssignments(arg0 context.Context, arg1 *ssoadmin.ListAccountAssignmentsInput, arg2 ...func(*ssoadmin.Options)) (*ssoadmin.ListAccountAssignmentsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccountAssignments", varargs...)
	ret0, _ := ret[0].(*ssoadmin.ListAccountAssignmentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccountAssignments indicates an expected call of ListAccountAssignments.
func (mr *MockSSOAdminClientMockRecorder) ListAccountAssignments(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountAssignments", reflect.TypeOf((*MockSSOAdminClient)(nil).ListAccountAssignments), varargs...)
}

// ListInstances mocks base method.
func (m *MockSSOAdminClient) ListInstances(arg0 context.Context, arg1 *ssoadmin.ListInstancesInput, arg2 ...func(*ssoadmin.Options)) (*ssoadmin.ListInstancesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListInstances", varargs...)
	ret0, _ := ret[0].(*ssoadmin.ListInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInstances indicates an expected call of ListInstances.
func (mr *MockSSOAdminClientMockRecorder) ListInstances(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstances", reflect.TypeOf((*MockSSOAdminClient)(nil).ListInstances), varargs...)
}

// ListPermissionSets mocks base method.
func (m *MockSSOAdminClient) ListPermissionSets(arg0 context.Context, arg1 *ssoadmin.ListPermissionSetsInput, arg2 ...func(*ssoadmin.Options)) (*ssoadmin.ListPermissionSetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPermissionSets", varargs...)
	ret0, _ := ret[0].(*ssoadmin.ListPermissionSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPermissionSets indicates an expected call of ListPermissionSets.
func (mr *MockSSOAdminClientMockRecorder) ListPermissionSets(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPermissionSets", reflect.TypeOf((*MockSSOAdminClient)(nil).ListPermissionSets), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockSSOAdminClient) ListTagsForResource(arg0 context.Context, arg1 *ssoadmin.ListTagsForResourceInput, arg2 ...func(*ssoadmin.Options)) (*ssoadmin.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResource", varargs...)
	ret0, _ := ret[0].(*ssoadmin.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockSSOAdminClientMockRecorder) ListTagsForResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockSSOAdminClient)(nil).ListTagsForResource), varargs...)
}
